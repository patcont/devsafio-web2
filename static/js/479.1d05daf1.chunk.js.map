{"version":3,"file":"static/js/479.1d05daf1.chunk.js","mappings":"gUAAaA,EAAc,CACzB,CACEC,KAAM,QACNC,GAAI,QACJC,YAAa,kBACbC,KAAM,QACNC,MAAO,QACPC,aAAc,OAEhB,CACEL,KAAM,WACNC,GAAI,WACJC,YAAa,gBACbC,KAAM,WACNC,MAAO,gBACPC,aAAc,Q,SCkFlB,EAnFc,WACZ,IAAQC,GAAgBC,EAAAA,EAAAA,YAAWC,EAAAA,GAA3BF,YACR,GAAsCG,EAAAA,EAAAA,WAAS,GAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACIC,GAAWC,EAAAA,EAAAA,MAETC,EAAQ,mCAAG,WAAOC,GAAP,iEACfC,QAAQC,IAAIF,GACZJ,GAAe,IACfO,EAAAA,EAAAA,IAAa,CACXC,MAAOC,EAAOL,OAAOI,MACrBE,SAAUD,EAAOL,OAAOM,WAEvBC,MAAK,SAACC,IACLC,EAAAA,EAAAA,GAAmBD,GAAK,WACtBjB,EAAYiB,EAAIE,MAAOF,EAAIG,KAAKC,SAE/BL,MAAK,WACJX,GAAe,GACfC,EAAS,eAAgB,CAAEgB,SAAS,EAAMC,MAAON,OAElDO,OAAM,WACLnB,GAAe,SAGpBmB,OAAM,WACLnB,GAAe,MApBJ,2CAAH,sDAwBRS,GAASW,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbb,MAAO,GACPE,SAAU,IAEZP,SAAUA,EACVmB,UAAUA,EAAAA,EAAAA,IAASC,EAAAA,MAGfC,GAAkBC,EAAAA,EAAAA,IAA0BhB,GAElD,OACE,+BACE,gBAAKiB,UAAU,0DAAf,UACE,oBAASA,UAAU,6EAAnB,SACI3B,GA6BA,gBAAK2B,UAAU,oEAAf,UACE,SAACC,EAAA,EAAD,OA7BF,gBAAKD,UAAU,iCAAf,UACE,UAACE,EAAA,EAAD,YACE,eAAIF,UAAU,gBAAd,6BACA,iBAAMA,UAAU,MAAMvB,SAAUM,EAAOoB,aAAvC,UACE,gBAAKH,UAAU,MAAf,UACE,gCACGtC,EAAY0C,KAAI,SAACC,EAAMC,GAAP,OACf,SAACC,EAAA,EAAD,CAEExC,MAAOsC,EAAKtC,MACZJ,KAAM0C,EAAK1C,KACX6C,SAAUV,EACVlC,GAAIyC,EAAKzC,GACTC,YAAawC,EAAKxC,YAClBC,KAAMuC,EAAKvC,KACXiB,OAAQA,GARV,gBACgBuB,GADhB,OACwBD,EAAKvC,WAU/B,SAAC2C,EAAA,EAAD,CACEC,MAAO,UACP/C,KAAM","sources":["views/Login/data/inputConfig.js","views/Login/Login.js"],"sourcesContent":["export const inputConfig = [\r\n  {\r\n    type: \"email\",\r\n    id: \"email\",\r\n    placeholder: \"email@gmail.com\",\r\n    name: \"email\",\r\n    label: \"email\",\r\n    autoComplete: \"off\",\r\n  },\r\n  {\r\n    type: \"password\",\r\n    id: \"password\",\r\n    placeholder: \"contraseña\",\r\n    name: \"password\",\r\n    label: \"contraseña\",\r\n    autoComplete: \"off\",\r\n  },\r\n];","import React, { useContext, useState } from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport { ButtonComponent } from \"../../components/common/ButtonComponent\";\r\nimport { InputComponent } from \"../../components/common/InputComponent\";\r\nimport { loginSchema as schema } from \"../../components/schemas/schema\";\r\nimport { authContext } from \"../../context/authContext\";\r\nimport { FormsCardContainer } from \"../../layout/FormsCardContainer\";\r\nimport { login as loginService } from \"../../services/users\";\r\nimport { handlerInputChangeCreator, validate } from \"../../utils/utils\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { SpinnerLoader } from \"../../components/loaders/SpinnerLoader\";\r\nimport { responseOnValidate } from \"../../utils/alerts\";\r\nimport { inputConfig } from \"./data/inputConfig\";\r\n\r\nconst Login = () => {\r\n  const { handleLogin } = useContext(authContext);\r\n  const [formLoading, setFormLoading] = useState(false);\r\n  let navigate = useNavigate();\r\n\r\n  const onSubmit = async (values) => {\r\n    console.log(values);\r\n    setFormLoading(true);\r\n    loginService({\r\n      email: formik.values.email,\r\n      password: formik.values.password,\r\n    })\r\n      .then((res) => {\r\n        responseOnValidate(res, () => {\r\n          handleLogin(res.token, res.data.user);\r\n        })\r\n          .then(() => {\r\n            setFormLoading(false);\r\n            navigate(\"../dashboard\", { replace: true, state: res });\r\n          })\r\n          .catch(() => {\r\n            setFormLoading(false);\r\n          });\r\n      })\r\n      .catch(() => {\r\n        setFormLoading(false);\r\n      });\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n    onSubmit: onSubmit,\r\n    validate: validate(schema),\r\n  });\r\n\r\n  const handleTxtChange = handlerInputChangeCreator(formik);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"bg-primary containerWithHeader-min-height flex flex-col\">\r\n        <section className=\" flex mt-20 md:mt-0 grow md:items-center animate__animated animate__fadeIn\">\r\n          {!formLoading ? (\r\n            <div className=\"container mb-16   mx-auto mt-4\">\r\n              <FormsCardContainer>\r\n                <h3 className=\"text-3xl px-4\">Iniciar sesion</h3>\r\n                <form className=\"p-1\" onSubmit={formik.handleSubmit}>\r\n                  <div className=\"p-4\">\r\n                    <>\r\n                      {inputConfig.map((item, index) => (\r\n                        <InputComponent\r\n                          key={`input-${index}${item.name}`}\r\n                          label={item.label}\r\n                          type={item.type}\r\n                          onChange={handleTxtChange}\r\n                          id={item.id}\r\n                          placeholder={item.placeholder}\r\n                          name={item.name}\r\n                          formik={formik}\r\n                        />\r\n                      ))}\r\n                      <ButtonComponent\r\n                        style={\"primary\"}\r\n                        type={\"submit\"}\r\n                      ></ButtonComponent>\r\n                    </>\r\n                  </div>\r\n                </form>\r\n              </FormsCardContainer>\r\n            </div>\r\n          ) : (\r\n            <div className=\"mx-auto container mb-16 flex justify-center w-full  items-center \">\r\n              <SpinnerLoader />\r\n            </div>\r\n          )}\r\n        </section>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"names":["inputConfig","type","id","placeholder","name","label","autoComplete","handleLogin","useContext","authContext","useState","formLoading","setFormLoading","navigate","useNavigate","onSubmit","values","console","log","loginService","email","formik","password","then","res","responseOnValidate","token","data","user","replace","state","catch","useFormik","initialValues","validate","schema","handleTxtChange","handlerInputChangeCreator","className","SpinnerLoader","FormsCardContainer","handleSubmit","map","item","index","InputComponent","onChange","ButtonComponent","style"],"sourceRoot":""}